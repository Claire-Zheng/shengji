!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var a=Array(e),r=0;for(t=0;t<n;t++)for(var s=arguments[t],o=0,i=s.length;o<i;o++,r++)a[r]=s[o];return a},o=React.createElement,i={};CARDS.forEach((function(e){i[e.value]=e}));var c=function(e){function t(t){var n=e.call(this,t)||this;return n.setGameMode=n.setGameMode.bind(n),n.startGame=n.startGame.bind(n),n.setKittySize=n.setKittySize.bind(n),n}return r(t,e),t.prototype.setGameMode=function(e){e.preventDefault(),"Tractor"==e.target.value?I({Action:{SetGameMode:"Tractor"}}):I({Action:{SetGameMode:{FindingFriends:{num_friends:0,friends:[]}}}})},t.prototype.setKittySize=function(e){(e.preventDefault(),""!=e.target.value)&&I({Action:{SetKittySize:parseInt(e.target.value,10)}})},t.prototype.startGame=function(e){e.preventDefault(),I({Action:"StartGame"})},t.prototype.render=function(){var e="Tractor"==this.props.state.game_mode?"Tractor":"FindingFriends";return React.createElement("div",null,React.createElement(w,{game_mode:this.props.state.game_mode}),React.createElement(R,{players:this.props.state.players,landlord:this.props.state.landlord,next:null,movable:!0,name:this.props.name}),React.createElement("p",null,"Send the link to other players to allow them to join the game:"," ",React.createElement("a",{href:window.location.href,target:"_blank"},React.createElement("code",null,window.location.href))),React.createElement("select",{value:e,onChange:this.setGameMode},React.createElement("option",{value:"Tractor"},"升级 / Tractor"),React.createElement("option",{value:"FindingFriends"},"找朋友 / Finding Friends")),React.createElement(b,{num_decks:this.props.state.num_decks,players:this.props.state.players}),this.props.state.players.length>=4?React.createElement("button",{onClick:this.startGame},"Start game"):React.createElement("p",null,"Waiting for players..."),React.createElement(k,{players:this.props.state.players}),React.createElement(_,{players:this.props.state.players,landlord:this.props.state.landlord}),React.createElement(C,{players:this.props.state.players,name:this.props.name,num_decks:this.props.state.num_decks}))},t}(React.Component),l=function(e){function t(t){var n=e.call(this,t)||this;return n.could_draw=!1,n.timeout=null,n.state={selected:[],autodraw:!0},n.setSelected=n.setSelected.bind(n),n.makeBid=n.makeBid.bind(n),n.drawCard=n.drawCard.bind(n),n.onAutodrawClicked=n.onAutodrawClicked.bind(n),n}return r(t,e),t.prototype.setSelected=function(e){this.setState({selected:e})},t.prototype.makeBid=function(e){var t=this;e.preventDefault();var n={};if(this.state.selected.forEach((function(e){return n[e]=(n[e]||0)+1})),1==Object.keys(n).length){var a={};this.props.state.players.forEach((function(e){a[e.id]=e}));var r=function(e){var r=0;s.props.state.bids.forEach((function(n){a[n.id].name==t.props.name&&n.card==e&&(r=r<n.count?n.count:r)})),I({Action:{Bid:[e,n[e]+r]}}),s.setSelected([])},s=this;for(var o in n)r(o)}},t.prototype.drawCard=function(){var e=this.props.state.players[this.props.state.position].name==this.props.name;this.timeout&&(clearTimeout(this.timeout),this.timeout=null),e&&I({Action:"DrawCard"})},t.prototype.pickUpKitty=function(e){e.preventDefault(),I({Action:"PickUpKitty"})},t.prototype.onAutodrawClicked=function(e){this.setState({autodraw:e.target.checked}),e.target.checked?this.drawCard():this.timeout&&(clearTimeout(this.timeout),this.timeout=null)},t.prototype.render=function(){var e=this,t=this.props.state.players[this.props.state.position].name==this.props.name&&this.props.state.deck.length>0;t&&!this.could_draw&&null==this.timeout&&this.state.autodraw&&(this.timeout=setTimeout((function(){e.drawCard()}),250)),this.could_draw=t;var n=this.props.state.players[this.props.state.position].id;this.props.state.position;0==this.props.state.deck.length&&this.props.state.bids.length>0&&(n=this.props.state.bids[this.props.state.bids.length-1].id,this.props.state.players.forEach((function(e,t){e.id==n&&t})));var a={};this.props.state.players.forEach((function(e){a[e.id]=e}));var r={};this.props.state.bids.forEach((function(t){if(a[t.id].name==e.props.name){var n=r[t.card]||0;r[t.card]=n<t.count?t.count:n}}));var o=s(this.props.cards);return Object.keys(r).forEach((function(e){for(var t=r[e]||0,n=0;n<t;n+=1){var a=o.indexOf(e);a>=0&&o.splice(a,1)}})),React.createElement("div",null,React.createElement(w,{game_mode:this.props.state.game_mode}),React.createElement(R,{players:this.props.state.players,landlord:this.props.state.landlord,next:n,name:this.props.name}),React.createElement("div",null,React.createElement("h2",null,"Bids"),this.props.state.bids.map((function(t,n){var a="unknown";return e.props.state.players.forEach((function(e){e.id==t.id&&(a=e.name)})),React.createElement(y,{label:a,key:n,cards:Array(t.count).fill(t.card)})}))),React.createElement("button",{onClick:function(t){t.preventDefault(),e.drawCard()},disabled:!t},"Draw card"),React.createElement("label",null,React.createElement("input",{type:"checkbox",name:"autodraw",checked:this.state.autodraw,onChange:this.onAutodrawClicked})),React.createElement("button",{onClick:this.makeBid,disabled:0==this.state.selected.length},"Make bid"),React.createElement("button",{onClick:this.pickUpKitty,disabled:this.props.state.deck.length>0||0==this.props.state.bids.length},"Pick up cards from the bottom"),React.createElement(h,{cards:o,selected:this.state.selected,setSelected:this.setSelected}))},t}(React.Component),p=function(e){function t(t){var n=e.call(this,t)||this;return n.moveCardToKitty=n.moveCardToKitty.bind(n),n.moveCardToHand=n.moveCardToHand.bind(n),n.startGame=n.startGame.bind(n),n.pickFriends=n.pickFriends.bind(n),n.state={friends:[]},n.fixFriends=n.fixFriends.bind(n),n}return r(t,e),t.prototype.fixFriends=function(){if("Tractor"!=this.props.state.game_mode){var e=this.props.state.game_mode.FindingFriends,t=e.num_friends,n=e.friends;if(t!=this.state.friends.length)if(n.length!=t){for(var a=s(this.state.friends);a.length<t;)a.push({card:"",skip:0,player_id:null});for(;a.length>t;)a.pop();this.setState({friends:a})}else this.setState({friends:n})}else 0!=this.state.friends.length&&this.setState({friends:[]})},t.prototype.componentDidMount=function(){this.fixFriends()},t.prototype.componentDidUpdate=function(){this.fixFriends()},t.prototype.moveCardToKitty=function(e){I({Action:{MoveCardToKitty:e}})},t.prototype.moveCardToHand=function(e){I({Action:{MoveCardToHand:e}})},t.prototype.startGame=function(e){e.preventDefault(),I({Action:"BeginPlay"})},t.prototype.pickFriends=function(e){e.preventDefault(),"Tractor"!=this.props.state.game_mode&&this.props.state.game_mode.FindingFriends.num_friends==this.state.friends.length&&I({Action:{SetFriends:this.state.friends}})},t.prototype.render=function(){var e=this,t=0;return this.props.state.players.forEach((function(n,a){n.id==e.props.state.landlord&&(t=a)})),this.props.state.players[t].name==this.props.name?React.createElement("div",null,React.createElement(w,{game_mode:this.props.state.game_mode}),React.createElement(R,{players:this.props.state.players,landlord:this.props.state.landlord,next:this.props.state.landlord,name:this.props.name}),React.createElement(v,{trump:this.props.state.trump}),"Tractor"!=this.props.state.game_mode?React.createElement("div",null,React.createElement(S,{game_mode:this.props.state.game_mode}),this.state.friends.map((function(t,n){return React.createElement(N,{onChange:function(t){var a=s(e.state.friends);a[n]=t,e.setState({friends:a})},key:n,friend:t,trump:e.props.state.trump,num_decks:e.props.state.num_decks})})),React.createElement("button",{onClick:this.pickFriends},"Pick friends")):null,React.createElement("h2",null,"Your hand"),React.createElement("div",{className:"hand"},this.props.cards.map((function(t,n){return React.createElement(f,{key:n,onClick:function(){return e.moveCardToKitty(t)},card:t})}))),React.createElement("h2",null,"Discarded cards"," ",this.props.state.kitty.length/this.props.state.kitty_size),React.createElement("div",{className:"kitty"},this.props.state.kitty.map((function(t,n){return React.createElement(f,{key:n,onClick:function(){return e.moveCardToHand(t)},card:t})}))),React.createElement("button",{onClick:this.startGame,disabled:this.props.state.kitty.length!=this.props.state.kitty_size},"Start game")):React.createElement("div",null,React.createElement(w,{game_mode:this.props.state.game_mode}),React.createElement(R,{players:this.props.state.players,landlord:this.props.state.landlord,next:this.props.state.landlord,name:this.props.name}),React.createElement(v,{trump:this.props.state.trump}),React.createElement("div",{className:"hand"},this.props.cards.map((function(e,t){return React.createElement(f,{key:t,card:e})}))),React.createElement("p",null,"Waiting..."))},t}(React.Component),u=function(e){function t(t){var n=e.call(this,t)||this;return n.was_my_turn=!1,n.state={selected:[]},n.setSelected=n.setSelected.bind(n),n.playCards=n.playCards.bind(n),n.takeBackCards=n.takeBackCards.bind(n),n.endTrick=n.endTrick.bind(n),n}return r(t,e),t.prototype.setSelected=function(e){this.setState({selected:e})},t.prototype.playCards=function(e){e.preventDefault(),I({Action:{PlayCards:this.state.selected}}),this.setSelected([])},t.prototype.takeBackCards=function(e){e.preventDefault(),I({Action:"TakeBackCards"})},t.prototype.endTrick=function(e){e.preventDefault(),I({Action:"EndTrick"})},t.prototype.startNewGame=function(e){e.preventDefault(),I({Action:"StartNewGame"})},t.prototype.render=function(){var e=this,t=this.props.state.trick.player_queue[0],n=!1,a=!1,r=!1;return this.props.state.players.forEach((function(s){if(s.name==e.props.name){var o=e.props.state.trick.played_cards[e.props.state.trick.played_cards.length-1];s.id==t&&(r=!0,a=o?e.state.selected.length==o.cards.length:e.state.selected.length>0),o&&s.id==o.id&&(n=!0)}})),this.props.beep_on_turn&&r&&!this.was_my_turn&&function(e,t,n){P||(P=new AudioContext);var a=P.createOscillator(),r=P.createGain();a.connect(r),a.frequency.value=t,a.type="square",r.connect(P.destination),r.gain.value=.01*e,a.start(P.currentTime),a.stop(P.currentTime+.001*n)}(3,440,200),this.was_my_turn=r,React.createElement("div",null,React.createElement(w,{game_mode:this.props.state.game_mode}),React.createElement(R,{players:this.props.state.players,landlord:this.props.state.landlord,landlords_team:this.props.state.landlords_team,name:this.props.name,next:t}),React.createElement(v,{trump:this.props.state.trump}),React.createElement(S,{game_mode:this.props.state.game_mode}),React.createElement(d,{trick:this.props.state.trick,players:this.props.state.players}),React.createElement("button",{onClick:this.playCards,disabled:!a},"Play selected cards"),React.createElement("button",{onClick:this.takeBackCards,disabled:!n},"Take back last play"),React.createElement("button",{onClick:this.endTrick,disabled:this.props.state.trick.player_queue.length>0},"Finish trick"),0==this.props.cards.length?React.createElement("button",{onClick:this.startNewGame},"Finish game"):null,",",React.createElement(h,{cards:this.props.cards,selected:this.state.selected,setSelected:this.setSelected}),this.props.state.last_trick&&this.props.show_last_trick?React.createElement("div",null,React.createElement("p",null,"Previous trick"),React.createElement(d,{trick:this.props.state.last_trick,players:this.props.state.players})):null,React.createElement(m,{points:this.props.state.points,players:this.props.state.players,landlords_team:this.props.state.landlords_team}),React.createElement(y,{cards:this.props.state.kitty,label:"底牌"}))},t}(React.Component),d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e=this,t={};this.props.players.forEach((function(e){t[e.id]=e.name}));var n=this.props.trick.played_cards.length>0?Array(this.props.trick.played_cards[0].cards.length).fill("🂠"):["🂠"];return React.createElement("div",{className:"trick"},this.props.trick.played_cards.map((function(n,a){var r=e.props.trick.current_winner==n.id;return React.createElement(y,{key:a,label:r?t[n.id]+" (!)":t[n.id],className:r?"winning":"",cards:n.cards})})),this.props.trick.player_queue.map((function(a,r){return React.createElement(y,{key:r+e.props.trick.played_cards.length,label:t[a],cards:n})})))},t}(React.Component),m=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e=this;return o("div",{className:"points"},this.props.players.map((function(t){var n=0;e.props.points[t.id].forEach((function(e){n+=i[e].points}));var a=e.props.landlords_team.includes(t.id)?"landlord":"",r=e.props.points[t.id].length>0?e.props.points[t.id]:["🂠"];return React.createElement(y,{key:t.id,className:a,label:t.name+": "+n+"分",cards:r})})))},t}(React.Component),h=function(e){function t(t){var n=e.call(this,t)||this;return n.selectCard=n.selectCard.bind(n),n.unselectCard=n.unselectCard.bind(n),n}return r(t,e),t.prototype.selectCard=function(e){var t=s(this.props.selected);t.push(e),this.props.setSelected(t)},t.prototype.unselectCard=function(e){var t=this.props.selected.indexOf(e);if(t>=0){var n=s(this.props.selected);n.splice(t,1),this.props.setSelected(n)}},t.prototype.render=function(){var e=this,t=s(this.props.cards);return this.props.selected.forEach((function(e){t.splice(t.indexOf(e),1)})),o("div",{className:"hand"},o("div",{className:"selected-cards"},this.props.selected.map((function(t,n){return o(f,{key:n,onClick:function(){return e.unselectCard(t)},card:t})})),0==this.props.selected.length?o(f,{card:"🂠"}):null),o("p",null,"Your hand"),o("div",{className:"unselected-cards"},t.map((function(t,n){return o(f,{key:n,onClick:function(){return e.selectCard(t)},card:t})})),0==t.length?o(f,{card:"🂠"}):null))},t}(React.Component),f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e=i[this.props.card];if(!e)return o("span",{className:"card unknown"},this.props.card);var t={className:"card "+e.typ};return this.props.onClick&&(t.onClick=this.props.onClick),o("span",t,e.display_value)},t}(React.Component),y=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e="labeled-play";return this.props.className&&(e=e+" "+this.props.className),React.createElement("div",{className:e},React.createElement("div",{className:"play"},this.props.cards.map((function(e,t){return React.createElement(f,{card:e,key:t})}))),React.createElement("div",{className:"label"},"this.props.label"))},t}(React.Component),g=function(e){function t(t){var n=e.call(this,t)||this;return n.handleChange=n.handleChange.bind(n),n.handleSubmit=n.handleSubmit.bind(n),n}return r(t,e),t.prototype.handleChange=function(e){this.props.setName(e.target.value)},t.prototype.handleSubmit=function(e){e.preventDefault(),this.props.name.length>0&&I({room_name:this.props.room_name,name:this.props.name})},t.prototype.render=function(){return React.createElement("div",null,React.createElement("form",{onSubmit:this.handleSubmit},React.createElement("input",{type:"text",placeholder:"name",value:this.props.name,onChange:this.handleChange,autoFocus:!0}),React.createElement("input",{type:"submit",value:"join"})))},t}(React.Component),v=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){return this.props.trump.Standard?React.createElement("div",{className:"trump"},"The trump suit is"," ",React.createElement("span",{className:this.props.trump.Standard.suit},this.props.trump.Standard.suit),", rank ",this.props.trump.Standard.number):this.props.trump.NoTrump?React.createElement("div",{className:"trump"},"No trump, rank ",this.props.trump.NoTrump.number):null},t}(React.Component),k=function(e){function t(t){var n=e.call(this,t)||this;return n.state={to_kick:""},n.onChange=n.onChange.bind(n),n.kick=n.kick.bind(n),n}return r(t,e),t.prototype.onChange=function(e){e.preventDefault(),this.setState({to_kick:e.target.value})},t.prototype.kick=function(e){e.preventDefault(),I({Kick:parseInt(this.state.to_kick,10)})},t.prototype.render=function(){return o("div",{className:"kicker"},o("select",{value:this.state.to_kick,onChange:this.onChange},o("option",{value:""},""),this.props.players.map((function(e){return o("option",{value:e.id,key:e.id},e.name)}))),o("button",{onClick:this.kick,disabled:""==this.state.to_kick},"kick"))},t}(React.Component),_=function(e){function t(t){var n=e.call(this,t)||this;return n.onChange=n.onChange.bind(n),n}return r(t,e),t.prototype.onChange=function(e){e.preventDefault(),""!=e.target.value?I({Action:{SetLandlord:parseInt(e.target.value,10)}}):I({Action:{SetLandlord:null}})},t.prototype.render=function(){return o("div",{className:"landlord-picker"},o("label",null,"leader: ",o("select",{value:null!=this.props.landlord?this.props.landlord:"",onChange:this.onChange},o("option",{value:""},"winner of the bid"),this.props.players.map((function(e){return o("option",{value:e.id,key:e.id},e.name)})))))},t}(React.Component),b=function(e){function t(t){var n=e.call(this,t)||this;return n.onChange=n.onChange.bind(n),n}return r(t,e),t.prototype.onChange=function(e){e.preventDefault(),""!=e.target.value?I({Action:{SetNumDecks:parseInt(e.target.value,10)}}):I({Action:{SetNumDecks:null}})},t.prototype.render=function(){return React.createElement("div",{className:"num-decks-picker"},React.createElement("label",null,"number of decks:"," ",React.createElement("select",{value:null!=this.props.num_decks?this.props.num_decks:"",onChange:this.onChange},React.createElement("option",{value:""},"default"),Array(this.props.players.length).fill(0).map((function(e,t){var n=t+1;return React.createElement("option",{value:n,key:t},n)})))))},t}(React.Component),C=function(e){function t(t){var n=e.call(this,t)||this;return n.onChange=n.onChange.bind(n),n}return r(t,e),t.prototype.onChange=function(e){e.preventDefault(),""!=e.target.value&&I({Action:{SetRank:e.target.value}})},t.prototype.render=function(){var e=this,t="";return this.props.players.forEach((function(n){n.name==e.props.name&&(t=n.level)})),React.createElement("div",{className:"landlord-picker"},React.createElement("label",null,"rank:"," ",React.createElement("select",{value:t,onChange:this.onChange},["2","3","4","5","6","7","8","9","10","J","K","Q","A"].map((function(e){return React.createElement("option",{value:e,key:e},e)})))))},t}(React.Component),R=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.movePlayerLeft=function(e,t){e.preventDefault();var n=this.props.players.map((function(e){return e.id})),a=n.indexOf(t);if(a>0){var r=n[a];n[a]=n[a-1],n[a-1]=r}else{r=n[a];n[a]=n[n.length-1],n[n.length-1]=r}I({Action:{ReorderPlayers:n}})},t.prototype.movePlayerRight=function(e,t){e.preventDefault();var n=this.props.players.map((function(e){return e.id})),a=n.indexOf(t);if(a<n.length-1){var r=n[a];n[a]=n[a+1],n[a+1]=r}else{r=n[a];n[a]=n[0],n[0]=r}I({Action:{ReorderPlayers:n}})},t.prototype.render=function(){var e=this;return o("table",{className:"players"},o("tbody",null,o("tr",null,this.props.players.map((function(t){var n="player",a=t.name+" (rank "+t.level+")";return t.id==e.props.landlord&&(a+=" (当庄)"),t.name==e.props.name&&(a+=" (You!)"),(t.id==e.props.landlord||e.props.landlords_team&&e.props.landlords_team.includes(t.id))&&(n+=" landlord"),t.id==e.props.next&&(n+=" next"),o("td",{key:t.id,className:n},e.props.movable?o("button",{onClick:function(n){return e.movePlayerLeft(n,t.id)}},"<"):null,a,e.props.movable?o("button",{onClick:function(n){return e.movePlayerRight(n,t.id)}},">"):null)})))))},t}(React.Component),E=function(e){function t(t){var n=e.call(this,t)||this;return n.anchor=React.createRef(),n.state={message:""},n.handleChange=n.handleChange.bind(n),n.handleSubmit=n.handleSubmit.bind(n),n}return r(t,e),t.prototype.componentDidMount=function(){this.anchor.current&&this.anchor.current.scrollIntoView({block:"nearest",inline:"start"})},t.prototype.componentDidUpdate=function(){this.anchor.current&&this.anchor.current.scrollIntoView({block:"nearest",inline:"start"})},t.prototype.handleChange=function(e){this.setState({message:e.target.value})},t.prototype.handleSubmit=function(e){e.preventDefault(),this.state.message.length>0&&I({Message:this.state.message}),this.setState({message:""})},t.prototype.render=function(){return React.createElement("div",{className:"chat"},React.createElement("div",{className:"messages"},this.props.messages.map((function(e,t){var n="message";return e.from_game&&(n+=" game-message"),React.createElement("p",{key:t,className:n},e.from,": ",e.message)})),React.createElement("div",{className:"chat-anchor",ref:this.anchor})),React.createElement("form",{onSubmit:this.handleSubmit},React.createElement("input",{type:"text",placeholder:"type message here",value:this.state.message,onChange:this.handleChange}),React.createElement("input",{type:"submit",value:"submit"})))},t}(React.Component),w=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){return"Tractor"==this.props.game_mode?React.createElement("h1",null,"升级 / Tractor"):React.createElement("h1",null,"找朋友 / Finding Friends")},t}(React.Component),S=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){return"Tractor"!=this.props.game_mode?o("div",{className:"pending-friends"},this.props.game_mode.FindingFriends.friends.map((function(e,t){if(null!=e.player_id)return null;var n=i[e.card];if(!n)return null;n.number,n.typ;return 0==e.skip?o("p",{key:t},"The next person to play ",o("span",{className:n.typ},""+n.number+n.typ)," is a friend"):o("p",{key:t},e.skip+" ",o("span",{className:n.typ},""+n.number+n.typ)," can be played before the next person to play ",o("span",{className:n.typ},""+n.number+n.typ)," is a friend")}))):null},t}(React.Component),N=function(e){function t(t){var n=e.call(this,t)||this;return n.onCardChange=n.onCardChange.bind(n),n.onOrdinalChange=n.onOrdinalChange.bind(n),n}return r(t,e),t.prototype.onCardChange=function(e){e.preventDefault(),this.props.onChange({card:e.target.value,skip:this.props.friend.skip})},t.prototype.onOrdinalChange=function(e){e.preventDefault(),this.props.onChange({card:this.props.friend.card,skip:parseInt(e.target.value,10)})},t.prototype.render=function(){var e,t=this.props.trump.Standard?this.props.trump.Standard.number:null===(e=this.props.trump.NoTrump)||void 0===e?void 0:e.number;return o("div",{className:"friend-select"},o("select",{value:this.props.friend.card,onChange:this.onCardChange},o("option",{value:""}," "),CARDS.map((function(e){return null!=e.number&&e.number!=t?o("option",{key:e.value,value:e.value},""+e.number+e.typ):null}))),o("select",{value:this.props.friend.skip,onChange:this.onOrdinalChange},Array(this.props.num_decks).fill(1).map((function(e,t){return o("option",{key:t,value:t},t+1)}))))},t}(React.Component),T=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){return o("div",{className:"errors"},this.props.errors.map((function(e,t){return o("p",{key:t},o("code",null,e))})))},t}(React.Component);if(17!=window.location.hash.length){var A=new Uint8Array(8);window.crypto.getRandomValues(A);var D=Array.from(A,(function(e){return("0"+e.toString(16)).substr(-2)})).join("");window.location.hash=D}var x=("https:"==location.protocol?"wss://":"ws://")+location.host+location.pathname+(location.pathname.endsWith("/")?"api":"/api"),F=new WebSocket(x),O={connected:!1,room_name:window.location.hash.slice(1),name:window.localStorage.getItem("name")||"",game_state:null,four_color:"on"==window.localStorage.getItem("four_color")||!1,beep_on_turn:"on"==window.localStorage.getItem("beep_on_turn")||!1,show_last_trick:"on"==window.localStorage.getItem("show_last_trick")||!1,cards:[],errors:[],messages:[]};function I(e){F.send(JSON.stringify(e))}function M(){O.connected?null==O.game_state?ReactDOM.render(o("div",null,o("h2",null,"Room Name: "+O.room_name),o(T,{errors:O.errors}),o(g,{name:O.name,room_name:O.room_name,setName:function(e){O.name=e,window.localStorage.setItem("name",e),M()}})),document.getElementById("root")):ReactDOM.render(o("div",{className:O.four_color?"four-color":""},o(T,{errors:O.errors}),o("div",{className:"game"},O.game_state.Initialize?o(c,{state:O.game_state.Initialize,cards:O.cards,name:O.name}):null,O.game_state.Draw?o(l,{state:O.game_state.Draw,cards:O.cards,name:O.name}):null,O.game_state.Exchange?o(p,{state:O.game_state.Exchange,cards:O.cards,name:O.name}):null,O.game_state.Play?o(u,{state:O.game_state.Play,cards:O.cards,name:O.name,show_last_trick:O.show_last_trick,beep_on_turn:O.beep_on_turn}):null,O.game_state.Done?o("p",null,"Game over"):null),o(E,{messages:O.messages}),o("hr",null),o("div",{className:"settings"},o("label",null,"four-color mode",o("input",{name:"four-color",type:"checkbox",checked:O.four_color,onChange:function(e){O.four_color=e.target.checked,O.four_color?window.localStorage.setItem("four_color","on"):window.localStorage.setItem("four_color","off"),M()}})),o("label",null,"show last trick",o("input",{name:"show-last-trick",type:"checkbox",checked:O.show_last_trick,onChange:function(e){O.show_last_trick=e.target.checked,O.show_last_trick?window.localStorage.setItem("show_last_trick","on"):window.localStorage.setItem("show_last_trick","off"),M()}})),o("label",null,"beep on turn",o("input",{name:"show-last-trick",type:"checkbox",checked:O.beep_on_turn,onChange:function(e){O.beep_on_turn=e.target.checked,O.beep_on_turn?window.localStorage.setItem("beep_on_turn","on"):window.localStorage.setItem("beep_on_turn","off"),M()}})))),document.getElementById("root")):ReactDOM.render(React.createElement("p",null,"disconnected from server, please refresh"),document.getElementById("root"))}F.onopen=function(){O.connected=!0,M()},F.onclose=function(e){O.connected=!1,M()},F.onmessage=function(e){var t=JSON.parse(e.data);t.Message&&(O.messages.push(t.Message),O.messages.length>=100&&O.messages.shift()),t.Broadcast&&(O.messages.push({from:"GAME",message:t.Broadcast,from_game:!0}),O.messages.length>=100&&O.messages.shift()),t.Error&&(O.errors.push(t.Error),setTimeout((function(){O.errors=O.errors.filter((function(e){return e!=t.Error})),M()}),5e3)),t.State&&(O.game_state=t.State.state,O.cards=t.State.cards),"Kicked"==t&&F.close(),M()};var P=null}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,